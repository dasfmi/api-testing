// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"axiom/internal/utils"
	"axiom/models/components"
	"encoding/json"
	"fmt"
)

type Format string

const (
	FormatLegacy  Format = "legacy"
	FormatTabular Format = "tabular"
)

func (e Format) ToPointer() *Format {
	return &e
}

func (e *Format) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "tabular":
		*e = Format(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Format: %v", v)
	}
}

type QueryAplRequest struct {
	Format                Format                           `queryParam:"style=form,explode=true,name=format"`
	APLRequestWithOptions components.APLRequestWithOptions `request:"mediaType=application/json"`
	Nocache               *bool                            `default:"false" queryParam:"style=form,explode=true,name=nocache"`
	SaveAsKind            *string                          `queryParam:"style=form,explode=true,name=saveAsKind"`
	// when saveAsKind is true, this parameter indicates the id of the associated dataset
	ID *string `queryParam:"style=form,explode=true,name=id"`
}

func (q QueryAplRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(q, "", false)
}

func (q *QueryAplRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &q, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *QueryAplRequest) GetFormat() Format {
	if o == nil {
		return Format("")
	}
	return o.Format
}

func (o *QueryAplRequest) GetAPLRequestWithOptions() components.APLRequestWithOptions {
	if o == nil {
		return components.APLRequestWithOptions{}
	}
	return o.APLRequestWithOptions
}

func (o *QueryAplRequest) GetNocache() *bool {
	if o == nil {
		return nil
	}
	return o.Nocache
}

func (o *QueryAplRequest) GetSaveAsKind() *string {
	if o == nil {
		return nil
	}
	return o.SaveAsKind
}

func (o *QueryAplRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type QueryAplResponse struct {
	HTTPMeta components.HTTPMetadata
	// Successful APL result
	AplResult *components.AplResult
	Headers   map[string][]string
}

func (o *QueryAplResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *QueryAplResponse) GetAplResult() *components.AplResult {
	if o == nil {
		return nil
	}
	return o.AplResult
}

func (o *QueryAplResponse) GetHeaders() map[string][]string {
	if o == nil {
		return map[string][]string{}
	}
	return o.Headers
}
