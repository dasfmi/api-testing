// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"axiom-go/internal/utils"
	"axiom-go/models/components"
	"time"
)

type GetAnnotationsRequest struct {
	// The datasets to filter by.
	Datasets []string `queryParam:"style=form,explode=true,name=datasets"`
	// If set, will filter to events after this date. Should be in RFC3339.
	Start *time.Time `queryParam:"style=form,explode=true,name=start"`
	// If set, will filter to events before this date. Should be in RFC3339.
	End *time.Time `queryParam:"style=form,explode=true,name=end"`
}

func (g GetAnnotationsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAnnotationsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAnnotationsRequest) GetDatasets() []string {
	if o == nil {
		return nil
	}
	return o.Datasets
}

func (o *GetAnnotationsRequest) GetStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *GetAnnotationsRequest) GetEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.End
}

type GetAnnotationsResponse struct {
	HTTPMeta components.HTTPMetadata
	// A list of annotations.
	Annotations []components.Annotation
}

func (o *GetAnnotationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetAnnotationsResponse) GetAnnotations() []components.Annotation {
	if o == nil {
		return nil
	}
	return o.Annotations
}
