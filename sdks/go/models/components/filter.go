// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// FilterOp - we also support '==', but we're not exporting that to swagger, cause it can't deal with it
// add >, >=, <, <= to that list, it breaks codegen
type FilterOp string

const (
	FilterOpAnd           FilterOp = "and"
	FilterOpOr            FilterOp = "or"
	FilterOpNot           FilterOp = "not"
	FilterOpEq            FilterOp = "eq"
	FilterOpNotEqual      FilterOp = "!="
	FilterOpNe            FilterOp = "ne"
	FilterOpExists        FilterOp = "exists"
	FilterOpNotExists     FilterOp = "not-exists"
	FilterOpGt            FilterOp = "gt"
	FilterOpGte           FilterOp = "gte"
	FilterOpLt            FilterOp = "lt"
	FilterOpLte           FilterOp = "lte"
	FilterOpStartsWith    FilterOp = "starts-with"
	FilterOpNotStartsWith FilterOp = "not-starts-with"
	FilterOpEndsWith      FilterOp = "ends-with"
	FilterOpNotEndsWith   FilterOp = "not-ends-with"
	FilterOpContains      FilterOp = "contains"
	FilterOpNotContains   FilterOp = "not-contains"
	FilterOpRegexp        FilterOp = "regexp"
	FilterOpNotRegexp     FilterOp = "not-regexp"
)

func (e FilterOp) ToPointer() *FilterOp {
	return &e
}

func (e *FilterOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "and":
		fallthrough
	case "or":
		fallthrough
	case "not":
		fallthrough
	case "eq":
		fallthrough
	case "!=":
		fallthrough
	case "ne":
		fallthrough
	case "exists":
		fallthrough
	case "not-exists":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		fallthrough
	case "starts-with":
		fallthrough
	case "not-starts-with":
		fallthrough
	case "ends-with":
		fallthrough
	case "not-ends-with":
		fallthrough
	case "contains":
		fallthrough
	case "not-contains":
		fallthrough
	case "regexp":
		fallthrough
	case "not-regexp":
		*e = FilterOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterOp: %v", v)
	}
}

type FilterValue struct {
}

type Filter struct {
	// Supported for these filters: starts-with, not-starts-with, ends-with, not-ends-with, contains, not-contains, eq, ne.
	CaseSensitive *bool `json:"caseSensitive,omitempty"`
	// Supported for these filters: and, or, not.
	Children []string `json:"children,omitempty"`
	Field    string   `json:"field"`
	// we also support '==', but we're not exporting that to swagger, cause it can't deal with it
	// add >, >=, <, <= to that list, it breaks codegen
	Op    FilterOp     `json:"op"`
	Value *FilterValue `json:"value,omitempty"`
}

func (o *Filter) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *Filter) GetChildren() []string {
	if o == nil {
		return nil
	}
	return o.Children
}

func (o *Filter) GetField() string {
	if o == nil {
		return ""
	}
	return o.Field
}

func (o *Filter) GetOp() FilterOp {
	if o == nil {
		return FilterOp("")
	}
	return o.Op
}

func (o *Filter) GetValue() *FilterValue {
	if o == nil {
		return nil
	}
	return o.Value
}
