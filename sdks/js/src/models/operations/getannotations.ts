/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components";
import * as z from "zod";

export type GetAnnotationsRequest = {
    /**
     * The datasets to filter by.
     */
    datasets?: Array<string> | undefined;
    /**
     * If set, will filter to events after this date. Should be in RFC3339.
     */
    start?: Date | undefined;
    /**
     * If set, will filter to events before this date. Should be in RFC3339.
     */
    end?: Date | undefined;
};

export type GetAnnotationsResponse = {
    httpMeta: components.HTTPMetadata;
    /**
     * A list of annotations.
     */
    annotations?: Array<components.Annotation> | undefined;
};

/** @internal */
export namespace GetAnnotationsRequest$ {
    export type Inbound = {
        datasets?: Array<string> | undefined;
        start?: string | undefined;
        end?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetAnnotationsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            datasets: z.array(z.string()).optional(),
            start: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            end: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.datasets === undefined ? null : { datasets: v.datasets }),
                ...(v.start === undefined ? null : { start: v.start }),
                ...(v.end === undefined ? null : { end: v.end }),
            };
        });

    export type Outbound = {
        datasets?: Array<string> | undefined;
        start?: string | undefined;
        end?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAnnotationsRequest> = z
        .object({
            datasets: z.array(z.string()).optional(),
            start: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            end: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.datasets === undefined ? null : { datasets: v.datasets }),
                ...(v.start === undefined ? null : { start: v.start }),
                ...(v.end === undefined ? null : { end: v.end }),
            };
        });
}

/** @internal */
export namespace GetAnnotationsResponse$ {
    export type Inbound = {
        HttpMeta: components.HTTPMetadata$.Inbound;
        Annotations?: Array<components.Annotation$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetAnnotationsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            HttpMeta: components.HTTPMetadata$.inboundSchema,
            Annotations: z.array(components.Annotation$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                httpMeta: v.HttpMeta,
                ...(v.Annotations === undefined ? null : { annotations: v.Annotations }),
            };
        });

    export type Outbound = {
        HttpMeta: components.HTTPMetadata$.Outbound;
        Annotations?: Array<components.Annotation$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetAnnotationsResponse> = z
        .object({
            httpMeta: components.HTTPMetadata$.outboundSchema,
            annotations: z.array(components.Annotation$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                HttpMeta: v.httpMeta,
                ...(v.annotations === undefined ? null : { Annotations: v.annotations }),
            };
        });
}
