/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An annotation.
 */
export type Annotation = {
    title?: string | undefined;
    /**
     * The description of the annotation.
     */
    description?: string | undefined;
    /**
     * The time of the annotation.
     */
    time?: Date | undefined;
    /**
     * The end time, use for ranged annotations.
     */
    endTime?: Date | undefined;
    /**
     * The type of the annotation. Can be anything, used for filtering in the UI.
     */
    type: string;
    /**
     * A URL attached to the annotation.
     */
    url?: string | undefined;
    /**
     * The datasets the annotation is attached to.
     */
    datasets: Array<string>;
    /**
     * The id of the annotation.
     */
    id: string;
};

/** @internal */
export namespace Annotation$ {
    export type Inbound = {
        title?: string | undefined;
        description?: string | undefined;
        time?: string | undefined;
        endTime?: string | undefined;
        type: string;
        url?: string | undefined;
        datasets: Array<string>;
        id: string;
    };

    export const inboundSchema: z.ZodType<Annotation, z.ZodTypeDef, Inbound> = z
        .object({
            title: z.string().optional(),
            description: z.string().optional(),
            time: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            endTime: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            type: z.string(),
            url: z.string().optional(),
            datasets: z.array(z.string()),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.time === undefined ? null : { time: v.time }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                type: v.type,
                ...(v.url === undefined ? null : { url: v.url }),
                datasets: v.datasets,
                id: v.id,
            };
        });

    export type Outbound = {
        title?: string | undefined;
        description?: string | undefined;
        time?: string | undefined;
        endTime?: string | undefined;
        type: string;
        url?: string | undefined;
        datasets: Array<string>;
        id: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Annotation> = z
        .object({
            title: z.string().optional(),
            description: z.string().optional(),
            time: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            endTime: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            type: z.string(),
            url: z.string().optional(),
            datasets: z.array(z.string()),
            id: z.string(),
        })
        .transform((v) => {
            return {
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.time === undefined ? null : { time: v.time }),
                ...(v.endTime === undefined ? null : { endTime: v.endTime }),
                type: v.type,
                ...(v.url === undefined ? null : { url: v.url }),
                datasets: v.datasets,
                id: v.id,
            };
        });
}
