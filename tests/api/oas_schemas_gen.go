// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

// Merged schema.
// Ref: #/components/schemas/Annotation
type Annotation struct {
	Title OptString `json:"title"`
	// The description of the annotation.
	Description OptString `json:"description"`
	// The time of the annotation.
	Time OptDateTime `json:"time"`
	// The end time, use for ranged annotations.
	EndTime OptDateTime `json:"endTime"`
	// The type of the annotation. Can be anything, used for filtering in the UI.
	Type string `json:"type"`
	// A URL attached to the annotation.
	URL OptString `json:"url"`
	// The datasets the annotation is attached to.
	Datasets []string `json:"datasets"`
	// The id of the annotation.
	ID string `json:"id"`
}

// GetTitle returns the value of Title.
func (s *Annotation) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *Annotation) GetDescription() OptString {
	return s.Description
}

// GetTime returns the value of Time.
func (s *Annotation) GetTime() OptDateTime {
	return s.Time
}

// GetEndTime returns the value of EndTime.
func (s *Annotation) GetEndTime() OptDateTime {
	return s.EndTime
}

// GetType returns the value of Type.
func (s *Annotation) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *Annotation) GetURL() OptString {
	return s.URL
}

// GetDatasets returns the value of Datasets.
func (s *Annotation) GetDatasets() []string {
	return s.Datasets
}

// GetID returns the value of ID.
func (s *Annotation) GetID() string {
	return s.ID
}

// SetTitle sets the value of Title.
func (s *Annotation) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *Annotation) SetDescription(val OptString) {
	s.Description = val
}

// SetTime sets the value of Time.
func (s *Annotation) SetTime(val OptDateTime) {
	s.Time = val
}

// SetEndTime sets the value of EndTime.
func (s *Annotation) SetEndTime(val OptDateTime) {
	s.EndTime = val
}

// SetType sets the value of Type.
func (s *Annotation) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *Annotation) SetURL(val OptString) {
	s.URL = val
}

// SetDatasets sets the value of Datasets.
func (s *Annotation) SetDatasets(val []string) {
	s.Datasets = val
}

// SetID sets the value of ID.
func (s *Annotation) SetID(val string) {
	s.ID = val
}

func (*Annotation) createAnnotationRes() {}
func (*Annotation) getAnnotationRes()    {}
func (*Annotation) updateAnnotationRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// DeleteAnnotationNoContent is response for DeleteAnnotation operation.
type DeleteAnnotationNoContent struct{}

func (*DeleteAnnotationNoContent) deleteAnnotationRes() {}

type GetAnnotationsOKApplicationJSON []Annotation

func (*GetAnnotationsOKApplicationJSON) getAnnotationsRes() {}

// Merged schema.
// Ref: #/components/schemas/NewAnnotation
type NewAnnotation struct {
	Title OptString `json:"title"`
	// The description of the annotation.
	Description OptString `json:"description"`
	// The time of the annotation.
	Time OptDateTime `json:"time"`
	// The end time, use for ranged annotations.
	EndTime OptDateTime `json:"endTime"`
	// The type of the annotation. Can be anything, used for filtering in the UI.
	Type string `json:"type"`
	// A URL attached to the annotation.
	URL OptString `json:"url"`
	// The datasets the annotation is attached to.
	Datasets []string `json:"datasets"`
}

// GetTitle returns the value of Title.
func (s *NewAnnotation) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *NewAnnotation) GetDescription() OptString {
	return s.Description
}

// GetTime returns the value of Time.
func (s *NewAnnotation) GetTime() OptDateTime {
	return s.Time
}

// GetEndTime returns the value of EndTime.
func (s *NewAnnotation) GetEndTime() OptDateTime {
	return s.EndTime
}

// GetType returns the value of Type.
func (s *NewAnnotation) GetType() string {
	return s.Type
}

// GetURL returns the value of URL.
func (s *NewAnnotation) GetURL() OptString {
	return s.URL
}

// GetDatasets returns the value of Datasets.
func (s *NewAnnotation) GetDatasets() []string {
	return s.Datasets
}

// SetTitle sets the value of Title.
func (s *NewAnnotation) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *NewAnnotation) SetDescription(val OptString) {
	s.Description = val
}

// SetTime sets the value of Time.
func (s *NewAnnotation) SetTime(val OptDateTime) {
	s.Time = val
}

// SetEndTime sets the value of EndTime.
func (s *NewAnnotation) SetEndTime(val OptDateTime) {
	s.EndTime = val
}

// SetType sets the value of Type.
func (s *NewAnnotation) SetType(val string) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *NewAnnotation) SetURL(val OptString) {
	s.URL = val
}

// SetDatasets sets the value of Datasets.
func (s *NewAnnotation) SetDatasets(val []string) {
	s.Datasets = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/responses/400
type R400 struct{}

func (*R400) createAnnotationRes() {}
func (*R400) deleteAnnotationRes() {}
func (*R400) getAnnotationRes()    {}
func (*R400) getAnnotationsRes()   {}
func (*R400) updateAnnotationRes() {}

// Ref: #/components/responses/401
type R401 struct{}

func (*R401) createAnnotationRes() {}
func (*R401) deleteAnnotationRes() {}
func (*R401) getAnnotationRes()    {}
func (*R401) getAnnotationsRes()   {}
func (*R401) updateAnnotationRes() {}

// Ref: #/components/responses/403
type R403 struct{}

func (*R403) createAnnotationRes() {}
func (*R403) deleteAnnotationRes() {}
func (*R403) getAnnotationRes()    {}
func (*R403) getAnnotationsRes()   {}
func (*R403) updateAnnotationRes() {}

// Ref: #/components/responses/500
type R500 struct{}

func (*R500) createAnnotationRes() {}
func (*R500) deleteAnnotationRes() {}
func (*R500) getAnnotationRes()    {}
func (*R500) getAnnotationsRes()   {}
func (*R500) updateAnnotationRes() {}

// The base annotation, used.
// Ref: #/components/schemas/UpdateAnnotation
type UpdateAnnotation struct {
	Title OptString `json:"title"`
	// The description of the annotation.
	Description OptString `json:"description"`
	// The time of the annotation.
	Time OptDateTime `json:"time"`
	// The end time, use for ranged annotations.
	EndTime OptDateTime `json:"endTime"`
	// The type of the annotation. Can be anything, used for filtering in the UI.
	Type OptString `json:"type"`
	// A URL attached to the annotation.
	URL OptString `json:"url"`
	// The datasets the annotation is attached to.
	Datasets []string `json:"datasets"`
}

// GetTitle returns the value of Title.
func (s *UpdateAnnotation) GetTitle() OptString {
	return s.Title
}

// GetDescription returns the value of Description.
func (s *UpdateAnnotation) GetDescription() OptString {
	return s.Description
}

// GetTime returns the value of Time.
func (s *UpdateAnnotation) GetTime() OptDateTime {
	return s.Time
}

// GetEndTime returns the value of EndTime.
func (s *UpdateAnnotation) GetEndTime() OptDateTime {
	return s.EndTime
}

// GetType returns the value of Type.
func (s *UpdateAnnotation) GetType() OptString {
	return s.Type
}

// GetURL returns the value of URL.
func (s *UpdateAnnotation) GetURL() OptString {
	return s.URL
}

// GetDatasets returns the value of Datasets.
func (s *UpdateAnnotation) GetDatasets() []string {
	return s.Datasets
}

// SetTitle sets the value of Title.
func (s *UpdateAnnotation) SetTitle(val OptString) {
	s.Title = val
}

// SetDescription sets the value of Description.
func (s *UpdateAnnotation) SetDescription(val OptString) {
	s.Description = val
}

// SetTime sets the value of Time.
func (s *UpdateAnnotation) SetTime(val OptDateTime) {
	s.Time = val
}

// SetEndTime sets the value of EndTime.
func (s *UpdateAnnotation) SetEndTime(val OptDateTime) {
	s.EndTime = val
}

// SetType sets the value of Type.
func (s *UpdateAnnotation) SetType(val OptString) {
	s.Type = val
}

// SetURL sets the value of URL.
func (s *UpdateAnnotation) SetURL(val OptString) {
	s.URL = val
}

// SetDatasets sets the value of Datasets.
func (s *UpdateAnnotation) SetDatasets(val []string) {
	s.Datasets = val
}
